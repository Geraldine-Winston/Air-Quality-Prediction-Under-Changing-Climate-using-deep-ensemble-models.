import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam

# Load dataset (assuming a CSV file)
df = pd.read_csv('air_quality_climate_data.csv')

# Assume the target variable is 'PM2.5' and features are all other columns
X = df.drop(columns=['PM2.5'])
y = df['PM2.5']

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Define a function to create a base model
def create_model():
    model = Sequential()
    model.add(Dense(128, activation='relu', input_shape=(X_train_scaled.shape[1],)))
    model.add(Dropout(0.3))
    model.add(Dense(64, activation='relu'))
    model.add(Dropout(0.3))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(1))
    model.compile(optimizer=Adam(learning_rate=0.001), loss='mse')
    return model

# Create an ensemble of models
n_models = 5
models = []

for _ in range(n_models):
    model = create_model()
    model.fit(X_train_scaled, y_train, epochs=100, batch_size=32, verbose=0)
    models.append(model)

# Make predictions and average them
def ensemble_predict(models, X):
    predictions = np.column_stack([model.predict(X).flatten() for model in models])
    return np.mean(predictions, axis=1)

# Predict on the test set
y_pred = ensemble_predict(models, X_test_scaled)

# Evaluate
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Save the models
for i, model in enumerate(models):
    model.save(f'air_quality_model_{i}.h5')

# Save the scaler
import joblib
joblib.dump(scaler, 'scaler.pkl')
